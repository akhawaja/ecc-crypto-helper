{
  "version": 3,
  "file": "ecc521.js",
  "sourceRoot": "",
  "sources": [
    "coffeescripts/ecc521.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "crypto = require \"crypto\"\necKeyUtils = require \"eckey-utils\"\ncommon = require \"./common\"\n\nCURVE_NAME = \"secp521r1\"\nHASH_TYPE = \"sha512\"\n\nmodule.exports =\n  curveName: CURVE_NAME\n\n  convertPemToJwk: (privateKey, publicKey, privateKeyOps = [], publicKeyOps = []) =>\n    if privateKeyOps.length is 0\n      privateKeyOps = [\"deriveKey\", \"sign\"]\n\n    if publicKeyOps.length is 0\n      publicKeyOps = [\"verify\"]\n\n    new Promise (resolve, reject) =>\n      params = {}\n\n      if privateKey isnt undefined and privateKey isnt null\n        params.privateKey = privateKey\n\n      if publicKey isnt undefined and publicKey isnt null\n        params.publicKey = publicKey\n\n      if params.privateKey is undefined and params.publicKey is undefined\n        reject new Error(\"You must supply at least a private key or public key.\")\n\n      jwk = ecKeyUtils.generateJwk CURVE_NAME, params\n      kid = (await common.randomString()).toString(\"hex\")\n\n      if jwk.privateKey isnt undefined\n        jwk.privateKey.kid = kid\n        jwk.privateKey.key_ops = privateKeyOps\n\n      if jwk.publicKey isnt undefined\n        jwk.publicKey.kid = kid\n        jwk.publicKey.key_ops = publicKeyOps\n\n      resolve jwk\n\n  generateJwkKeyPair: (privateKeyOps = [], publicKeyOps = []) =>\n    if privateKeyOps.length is 0\n      privateKeyOps = [\"deriveKey\", \"sign\"]\n\n    if publicKeyOps.length is 0\n      publicKeyOps = [\"verify\"]\n\n    new Promise (resolve, reject) =>\n      ecdh = crypto.createECDH CURVE_NAME\n      ecdh.generateKeys()\n      params =\n        privateKey: ecdh.getPrivateKey()\n        publicKey: ecdh.getPublicKey()\n\n      jwk = ecKeyUtils.generateJwk CURVE_NAME, params\n      kid = (await common.randomString()).toString(\"hex\")\n\n      jwk.privateKey.kid = kid\n      jwk.privateKey.key_ops = privateKeyOps\n\n      jwk.publicKey.kid = kid\n      jwk.publicKey.key_ops = publicKeyOps\n\n      resolve jwk\n\n  generatePemKeyPair: () =>\n    new Promise (resolve, reject) =>\n      ecdh = crypto.createECDH CURVE_NAME\n      ecdh.generateKeys()\n      params =\n        privateKey: ecdh.getPrivateKey()\n        publicKey: ecdh.getPublicKey()\n\n      resolve ecKeyUtils.generatePem CURVE_NAME, params\n\n  signPayload: (payload, privateKeyJwk) =>\n    new Promise (resolve, reject) =>\n      if typeof payload isnt \"string\"\n        return reject \"Payload must be a string.\"\n\n      jwk = ecKeyUtils.parseJwk privateKeyJwk\n      pems = ecKeyUtils.generatePem CURVE_NAME, {privateKey: jwk.privateKey, publicKey: jwk.publicKey}\n      signer = crypto.createSign HASH_TYPE\n      message = Buffer.from payload\n      signer.update message\n      resolve signer.sign pems.privateKey\n\n  verifyPayloadSignature: (payload, signature, publicKeyJwk) =>\n    new Promise (resolve, reject) =>\n      if typeof payload isnt \"string\"\n        return reject \"Payload must be a string.\"\n\n      jwk = ecKeyUtils.parseJwk publicKeyJwk\n      pems = ecKeyUtils.generatePem CURVE_NAME, {publicKey: jwk.publicKey}\n      verifier = crypto.createVerify HASH_TYPE\n      message = Buffer.from payload\n      verifier.update message\n      resolve verifier.verify pems.publicKey, signature\n\n  parseJwkToPem: (privateOrPublicJwk) =>\n    new Promise (resolve, reject) =>\n      resolve ecKeyUtils.parseJwk(privateOrPublicJwk)\n\n  computeSecret: (privatePemKey, otherPublicPemKey) =>\n    new Promise (resolve, reject) =>\n      try\n        ecdh = crypto.createECDH CURVE_NAME\n        ecdh.setPrivateKey (ecKeyUtils.parsePem(privatePemKey)).privateKey\n        resolve ecdh.computeSecret (ecKeyUtils.parsePem(otherPublicPemKey)).publicKey\n      catch err\n        reject err\n"
  ]
}