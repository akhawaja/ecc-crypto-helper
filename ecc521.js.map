{
  "version": 3,
  "file": "ecc521.js",
  "sourceRoot": "",
  "sources": [
    "coffeescripts/ecc521.coffee"
  ],
  "names": [],
  "mappings": "AAAA;AAAA,MAAA,UAAA,EAAA,SAAA,EAAA;;EAAA,SAAA,GAAY,OAAA,CAAQ,cAAR;;EAEZ,UAAA,GAAa;;EACb,SAAA,GAAY;;EAEZ,MAAM,CAAC,OAAP,GACE;IAAA,SAAA,EAAW,UAAX;;;;;;;;;IAUA,eAAA,EAAiB,CAAC,kBAAD,EAAqB,gBAAgB,EAArC,EAAyC,eAAe,EAAxD,CAAA,GAAA;aACf,OAAO,CAAC,OAAR,CAAgB,SAAS,CAAC,eAAV,CAA0B,UAA1B,EAAsC,kBAAtC,EAA0D,aAA1D,EAAyE,YAAzE,CAAhB;IADe,CAVjB;;;;;;;IAmBA,eAAA,EAAiB,CAAC,kBAAD,CAAA,GAAA;aACf,OAAO,CAAC,OAAR,CAAgB,SAAS,CAAC,eAAV,CAA0B,UAA1B,EAAsC,kBAAtC,CAAhB;IADe,CAnBjB;;;;;;;;IA6BA,kBAAA,EAAoB,CAAC,gBAAgB,EAAjB,EAAqB,eAAe,EAApC,CAAA,GAAA;aAClB,OAAO,CAAC,OAAR,CAAgB,SAAS,CAAC,kBAAV,CAA6B,UAA7B,EAAyC,aAAzC,EAAwD,YAAxD,CAAhB;IADkB,CA7BpB;;;;;;IAqCA,kBAAA,EAAoB,CAAA,CAAA,GAAA;aAClB,OAAO,CAAC,OAAR,CAAgB,SAAS,CAAC,kBAAV,CAA6B,UAA7B,CAAhB;IADkB,CArCpB;;;;;;;;IA+CA,WAAA,EAAa,CAAC,OAAD,EAAU,aAAV,CAAA,GAAA;aACX,OAAO,CAAC,OAAR,CAAgB,SAAS,CAAC,WAAV,CAAsB,OAAtB,EAA+B,aAA/B,EAA8C,SAA9C,CAAhB;IADW,CA/Cb;;;;;;;;;IA0DA,sBAAA,EAAwB,CAAC,OAAD,EAAU,SAAV,EAAqB,YAArB,CAAA,GAAA;aACtB,OAAO,CAAC,OAAR,CAAgB,SAAS,CAAC,sBAAV,CAAiC,OAAjC,EAA0C,SAA1C,EAAqD,YAArD,EAAmE,SAAnE,CAAhB;IADsB,CA1DxB;;;;;;;;IAoEA,aAAA,EAAe,CAAC,aAAD,EAAgB,iBAAhB,CAAA,GAAA;aACb,OAAO,CAAC,OAAR,CAAgB,SAAS,CAAC,aAAV,CAAwB,UAAxB,EAAoC,aAApC,EAAmD,iBAAnD,CAAhB;IADa;EApEf;AANF",
  "sourcesContent": [
    "commonEcc = require \"./common-ecc\"\n\nCURVE_NAME = \"secp521r1\"\nHASH_TYPE = \"sha512\"\n\nmodule.exports =\n  curveName: CURVE_NAME\n\n  ###*\n   * Convert a PEM certificate to a JSON Web Key.\n   *\n   * @param {string|Buffer} privateOrPublicPem - The private or public PEM key.\n   * @param {Array} privateKeyOps - The operations intended for the private key.\n   * @param {Array} publicKeyOps - The operations intended for the public key.\n   * @returns {Object} The converted certificate.\n  ###\n  convertPemToJwk: (privateOrPublicPem, privateKeyOps = [], publicKeyOps = []) =>\n    Promise.resolve commonEcc.convertPemToJwk(CURVE_NAME, privateOrPublicPem, privateKeyOps, publicKeyOps)\n\n  ###*\n   * Convert a JSON Web Key to a PEM certificate.\n   *\n   * @param {string|Buffer} privateOrPublicJwk - The private or public JSON Web Key.\n   * @returns {Object} The converted certificate.\n  ###\n  convertJwkToPem: (privateOrPublicJwk) =>\n    Promise.resolve commonEcc.convertJwkToPem(CURVE_NAME, privateOrPublicJwk)\n\n  ###*\n   * Generate an ECDH key pair as a JSON Web Key.\n   *\n   * @param {Array} privateKeyOps - The operations intended for the private key.\n   * @param {Array} publicKeyOps - The operations intended for the public key.\n   * @returns {string} The ECDH key pair.\n  ###\n  generateJwkKeyPair: (privateKeyOps = [], publicKeyOps = []) =>\n    Promise.resolve commonEcc.generateJwkKeyPair(CURVE_NAME, privateKeyOps, publicKeyOps)\n\n  ###*\n   * Generate an ECDH key pair as PEM certificates.\n   *\n   * @returns {Object} The PEM certificates.\n  ###\n  generatePemKeyPair: () =>\n    Promise.resolve commonEcc.generatePemKeyPair(CURVE_NAME)\n\n  ###*\n   * Sign a payload to prevent it from tamper.\n   *\n   * @param {string} payload - The payload to sign.\n   * @param {string} privateKeyPem - The private key in PEM format.\n   * @returns {Buffer} The signature for the payload.\n  ###\n  signPayload: (payload, privateKeyPem) =>\n    Promise.resolve commonEcc.signPayload(payload, privateKeyPem, HASH_TYPE)\n\n  ###*\n   * Verify the signature of a given payload.\n   *\n   * @param {string} payload - The payload against which the signature will be checked.\n   * @param {string|Buffer} signature - The signature of the payload.\n   * @param {Object} publicPemKey - The public ECDH key in PEM format.\n   * @returns {boolean}\n  ###\n  verifyPayloadSignature: (payload, signature, publicKeyPem) =>\n    Promise.resolve commonEcc.verifyPayloadSignature(payload, signature, publicKeyPem, HASH_TYPE)\n\n  ###*\n   * Compute an ECDH shared secret.\n   *\n   * @param {Object} privatePemKey - The private ECDH key in PEM format.\n   * @param {Object} otherPublicPemKey - The other public ECDH key in PEM format.\n   * @returns {Buffer}\n  ###\n  computeSecret: (privatePemKey, otherPublicPemKey) =>\n    Promise.resolve commonEcc.computeSecret(CURVE_NAME, privatePemKey, otherPublicPemKey)\n"
  ]
}