{
  "version": 3,
  "file": "ecc521.js",
  "sourceRoot": "",
  "sources": [
    "coffeescripts/ecc521.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "crypto = require \"crypto\"\necKeyUtils = require \"eckey-utils\"\ncommon = require \"./common\"\n\nCURVE_NAME = \"secp521r1\"\nHASH_TYPE = \"sha512\"\n\nmodule.exports =\n  curveName: CURVE_NAME\n\n  ###*\n   * Convert a PEM certificate to a JSON Web Key.\n   *\n   * @param {string|Buffer} privateOrPublicPem - The private or public PEM key.\n   * @param {Array} privateKeyOps - The operations intended for the private key.\n   * @param {Array} publicKeyOps - The operations intended for the public key.\n   * @returns {Object} The converted certificate.\n  ###\n  convertPemToJwk: (privateOrPublicPem, privateKeyOps = [], publicKeyOps = []) =>\n    new Promise (resolve, reject) =>\n      if privateKeyOps.length is 0\n        privateKeyOps = [\"deriveKey\", \"sign\"]\n\n      if publicKeyOps.length is 0\n        publicKeyOps = [\"verify\"]\n\n      try\n        parsed = ecKeyUtils.parsePem(privateOrPublicPem)\n        params = {}\n\n        if parsed.privateKey isnt undefined and parsed.privateKey isnt null\n          params.privateKey = parsed.privateKey\n\n        if parsed.publicKey isnt undefined and parsed.publicKey isnt null\n          params.publicKey = parsed.publicKey\n\n        jwk = ecKeyUtils.generateJwk(CURVE_NAME, parsed)\n        kid = (await common.randomString()).toString(\"hex\")\n\n        if jwk.privateKey isnt undefined\n          jwk.privateKey.kid = kid\n          jwk.privateKey.key_ops = privateKeyOps\n\n        if jwk.publicKey isnt undefined\n          jwk.publicKey.kid = kid\n          jwk.publicKey.key_ops = publicKeyOps\n\n        resolve jwk\n      catch err\n        reject err\n\n  ###*\n   * Convert a JSON Web Key to a PEM certificate.\n   *\n   * @param {string|Buffer} privateOrPublicJwk - The private or public JSON Web Key.\n   * @returns {Object} The converted certificate.\n  ###\n  convertJwkToPem: (privateOrPublicJwk) =>\n    new Promise (resolve, reject) =>\n      try\n        parsed = ecKeyUtils.parseJwk(privateOrPublicJwk)\n        params = {}\n\n        if parsed.privateKey isnt undefined and parsed.privateKey isnt null\n          params.privateKey = parsed.privateKey\n\n        if parsed.publicKey isnt undefined and parsed.publicKey isnt null\n          params.publicKey = parsed.publicKey\n\n        resolve ecKeyUtils.generatePem(CURVE_NAME, params)\n      catch err\n        reject err\n\n  ###*\n   * Generate an ECDH key pair as a JSON Web Key.\n   *\n   * @param {Array} privateKeyOps - The operations intended for the private key.\n   * @param {Array} publicKeyOps - The operations intended for the public key.\n   * @returns {string} The ECDH key pair.\n  ###\n  generateJwkKeyPair: (privateKeyOps = [], publicKeyOps = []) =>\n    if privateKeyOps.length is 0\n      privateKeyOps = [\"deriveKey\", \"sign\"]\n\n    if publicKeyOps.length is 0\n      publicKeyOps = [\"verify\"]\n\n    new Promise (resolve, reject) =>\n      ecdh = crypto.createECDH CURVE_NAME\n      ecdh.generateKeys()\n      params =\n        privateKey: ecdh.getPrivateKey()\n        publicKey: ecdh.getPublicKey()\n\n      jwk = ecKeyUtils.generateJwk CURVE_NAME, params\n      kid = (await common.randomString()).toString(\"hex\")\n\n      jwk.privateKey.kid = kid\n      jwk.privateKey.key_ops = privateKeyOps\n\n      jwk.publicKey.kid = kid\n      jwk.publicKey.key_ops = publicKeyOps\n\n      resolve jwk\n\n  ###*\n   * Generate an ECDH key pair as PEM certificates.\n   *\n   * @returns {Object} The PEM certificates.\n  ###\n  generatePemKeyPair: () =>\n    new Promise (resolve, reject) =>\n      ecdh = crypto.createECDH CURVE_NAME\n      ecdh.generateKeys()\n      params =\n        privateKey: ecdh.getPrivateKey()\n        publicKey: ecdh.getPublicKey()\n\n      resolve ecKeyUtils.generatePem CURVE_NAME, params\n\n  ###*\n   * Sign a payload to prevent it from tamper.\n   *\n   * @param {string} payload - The payload to sign.\n   * @param {string} privateKeyPem - The private key in PEM format.\n   * @returns {Buffer} The signature for the payload.\n  ###\n  signPayload: (payload, privateKeyPem) =>\n    new Promise (resolve, reject) =>\n      if typeof payload isnt \"string\"\n        return reject \"Payload must be a string.\"\n\n      signer = crypto.createSign HASH_TYPE\n      message = Buffer.from payload\n      signer.update message\n      resolve signer.sign privateKeyPem\n\n  ###*\n   * Verify the signature of a given payload.\n   *\n   * @param {string} payload - The payload against which the signature will be checked.\n   * @param {string|Buffer} signature - The signature of the payload.\n   * @param {Object} publicPemKey - The public ECDH key in PEM format.\n   * @returns {boolean}\n  ###\n  verifyPayloadSignature: (payload, signature, publicKeyPem) =>\n    new Promise (resolve, reject) =>\n      if typeof payload isnt \"string\"\n        return reject \"Payload must be a string.\"\n\n      verifier = crypto.createVerify HASH_TYPE\n      message = Buffer.from payload\n      verifier.update message\n      resolve verifier.verify publicKeyPem, signature\n\n  ###*\n   * Compute an ECDH shared secret.\n   *\n   * @param {Object} privatePemKey - The private ECDH key in PEM format.\n   * @param {Object} otherPublicPemKey - The other public ECDH key in PEM format.\n   * @returns {Buffer}\n  ###\n  computeSecret: (privatePemKey, otherPublicPemKey) =>\n    new Promise (resolve, reject) =>\n      try\n        ecdh = crypto.createECDH CURVE_NAME\n        ecdh.setPrivateKey (ecKeyUtils.parsePem(privatePemKey)).privateKey\n        resolve ecdh.computeSecret (ecKeyUtils.parsePem(otherPublicPemKey)).publicKey\n      catch err\n        reject err\n"
  ]
}