{
  "version": 3,
  "file": "spec.js",
  "sourceRoot": "..",
  "sources": [
    "coffeescripts/test/spec.coffee"
  ],
  "names": [],
  "mappings": "AAAA;AAAA,MAAA;;EAAA,MAAA,GAAS,OAAA,CAAQ,MAAR,CAAe,CAAC;;EAEzB,QAAA,CAAS,6CAAT,EAAwD,CAAA,CAAA,GAAA;AACtD,QAAA;IAAA,MAAA,GAAS,OAAA,CAAQ,WAAR;IAET,QAAA,CAAS,6BAAT,EAAwC,CAAA,CAAA,GAAA;MACtC,EAAA,CAAG,kCAAH,EAAuC,KAAA,CAAA,CAAA,GAAA;AACrC,YAAA,IAAA,EAAA;QAAA,IAAA,GAAO,CAAA,MAAM,MAAM,CAAC,MAAP,CAAA,CAAN;QACP,IAAA,GAAO,CAAA,MAAM,MAAM,CAAC,MAAP,CAAA,CAAN;QAEP,MAAA,CAAO,IAAI,CAAC,QAAL,CAAc,KAAd,CAAP,CAA4B,CAAC,EAAE,CAAC,GAAG,CAAC,KAApC,CAA0C,IAAI,CAAC,QAAL,CAAc,KAAd,CAA1C;QACA,MAAA,CAAO,IAAP,CAAY,CAAC,EAAE,CAAC,IAAI,CAAC,QAArB,CAA8B,EAA9B;eACA,MAAA,CAAO,IAAP,CAAY,CAAC,EAAE,CAAC,IAAI,CAAC,QAArB,CAA8B,EAA9B;MANqC,CAAvC;aAQA,EAAA,CAAG,wDAAH,EAA6D,KAAA,CAAA,CAAA,GAAA;AAC3D,YAAA,IAAA,EAAA,GAAA,EAAA;QAAA,GAAA,GAAM;QACN,IAAA,GAAO;QACP,IAAA,GAAO,CAAA,MAAM,MAAM,CAAC,YAAP,CAAoB,GAApB,EAAyB,IAAzB,CAAN;eACP,MAAA,CAAO,IAAP,CAAY,CAAC,EAAE,CAAC,MAAhB,CAAuB,GAAvB,EAA4B,IAA5B;MAJ2D,CAA7D;IATsC,CAAxC;IAeA,QAAA,CAAS,4BAAT,EAAuC,CAAA,CAAA,GAAA;AACrC,UAAA;MAAA,MAAA,GAAS,OAAA,CAAQ,WAAR;aAET,EAAA,CAAG,mDAAH,EAAwD,KAAA,CAAA,CAAA,GAAA;AACtD,YAAA,OAAA,EAAA,OAAA,EAAA,QAAA,EAAA;QAAA,IAAA,GAAO;QACP,QAAA,GAAW;QAEX,OAAA,GAAU,CAAA,MAAM,MAAM,CAAC,SAAP,CAAiB,IAAjB,CAAN;QACV,OAAA,GAAU,CAAA,MAAM,MAAM,CAAC,SAAP,CAAiB,OAAjB,CAAN;QAEV,MAAA,CAAO,QAAP,CAAgB,CAAC,EAAE,CAAC,KAApB,CAA0B,OAA1B;eACA,MAAA,CAAO,OAAP,CAAe,CAAC,EAAE,CAAC,KAAnB,CAAyB,IAAzB;MARsD,CAAxD;IAHqC,CAAvC;IAaA,QAAA,CAAS,gCAAT,EAA2C,CAAA,CAAA,GAAA;AACzC,UAAA;MAAA,GAAA,GAAM,OAAA,CAAQ,cAAR;aAEN,EAAA,CAAG,gDAAH,EAAqD,KAAA,CAAA,CAAA,GAAA;AACnD,YAAA,UAAA,EAAA,YAAA,EAAA,QAAA,EAAA;QAAA,QAAA,GAAW;QACX,IAAA,GAAO;QAEP,UAAA,GAAa,CAAA,MAAM,GAAG,CAAC,OAAJ,CAAY,IAAZ,EAAkB,QAAlB,CAAN;QACb,YAAA,GAAe,CAAA,MAAM,GAAG,CAAC,OAAJ,CAAY,UAAZ,EAAwB,QAAxB,CAAN;eAEf,MAAA,CAAO,YAAP,CAAoB,CAAC,EAAE,CAAC,KAAxB,CAA8B,IAA9B;MAPmD,CAArD;IAHyC,CAA3C;IAYA,QAAA,CAAS,2BAAT,EAAsC,CAAA,CAAA,GAAA;AACpC,UAAA,IAAA,EAAA;MAAA,IAAA,GAAO,OAAA,CAAQ,SAAR;MACP,IAAA,GAAO;MAEP,EAAA,CAAG,wCAAH,EAA6C,KAAA,CAAA,CAAA,GAAA;AAC3C,YAAA,CAAA,EAAA;QAAA,QAAA,GAAW;QACX,CAAA,GAAI,CAAA,MAAM,IAAI,CAAC,MAAL,CAAY,IAAZ,CAAN;eAEJ,MAAA,CAAO,CAAC,CAAC,QAAF,CAAW,KAAX,CAAP,CAAyB,CAAC,EAAE,CAAC,KAA7B,CAAmC,QAAnC;MAJ2C,CAA7C;MAMA,EAAA,CAAG,wCAAH,EAA6C,KAAA,CAAA,CAAA,GAAA;AAC3C,YAAA,CAAA,EAAA;QAAA,QAAA,GAAW,4DAAA,GACT;QACF,CAAA,GAAI,CAAA,MAAM,IAAI,CAAC,MAAL,CAAY,IAAZ,CAAN;eAEJ,MAAA,CAAO,CAAC,CAAC,QAAF,CAAW,KAAX,CAAP,CAAyB,CAAC,EAAE,CAAC,KAA7B,CAAmC,QAAnC;MAL2C,CAA7C;aAOA,EAAA,CAAG,wCAAH,EAA6C,KAAA,CAAA,CAAA,GAAA;AAC3C,YAAA,CAAA,EAAA;QAAA,QAAA,GAAW,4DAAA,GACT;QACF,CAAA,GAAI,CAAA,MAAM,IAAI,CAAC,MAAL,CAAY,IAAZ,CAAN;eAEJ,MAAA,CAAO,CAAC,CAAC,QAAF,CAAW,KAAX,CAAP,CAAyB,CAAC,EAAE,CAAC,KAA7B,CAAmC,QAAnC;MAL2C,CAA7C;IAjBoC,CAAtC;IAwBA,QAAA,CAAS,2BAAT,EAAsC,CAAA,CAAA,GAAA;AACpC,UAAA;MAAA,IAAA,GAAO,OAAA,CAAQ,SAAR;MAEP,EAAA,CAAG,gCAAH,EAAqC,KAAA,CAAA,CAAA,GAAA;AACnC,YAAA,kBAAA,EAAA,IAAA,EAAA;QAAA,kBAAA,GAAqB;QACrB,IAAA,GAAO;QACP,GAAA,GAAM,CAAA,MAAM,IAAI,CAAC,MAAL,CAAY,kBAAZ,EAAgC,IAAhC,CAAN;eAEN,MAAA,CAAO,GAAP,CAAW,CAAC,EAAE,CAAC,IAAI,CAAC,QAApB,CAA6B,IAA7B;MALmC,CAArC;MAOA,EAAA,CAAG,iCAAH,EAAsC,KAAA,CAAA,CAAA,GAAA;AACpC,YAAA,kBAAA,EAAA,IAAA,EAAA;QAAA,kBAAA,GAAqB;QACrB,IAAA,GAAO;QACP,GAAA,GAAM,CAAA,MAAM,IAAI,CAAC,MAAL,CAAY,kBAAZ,EAAgC,IAAhC,CAAN;eAEN,MAAA,CAAO,GAAP,CAAW,CAAC,EAAE,CAAC,IAAI,CAAC,QAApB,CAA6B,IAA7B;MALoC,CAAtC;MAOA,EAAA,CAAG,iCAAH,EAAsC,KAAA,CAAA,CAAA,GAAA;AACpC,YAAA,kBAAA,EAAA,IAAA,EAAA;QAAA,kBAAA,GAAqB;QACrB,IAAA,GAAO;QACP,GAAA,GAAM,CAAA,MAAM,IAAI,CAAC,MAAL,CAAY,kBAAZ,EAAgC,IAAhC,CAAN;eAEN,MAAA,CAAO,GAAP,CAAW,CAAC,EAAE,CAAC,IAAI,CAAC,QAApB,CAA6B,IAA7B;MALoC,CAAtC;MAOA,EAAA,CAAG,iCAAH,EAAsC,KAAA,CAAA,CAAA,GAAA;AACpC,YAAA,kBAAA,EAAA,IAAA,EAAA;QAAA,kBAAA,GAAqB;QACrB,IAAA,GAAO;QACP,GAAA,GAAM,CAAA,MAAM,IAAI,CAAC,MAAL,CAAY,kBAAZ,EAAgC,IAAhC,CAAN;eAEN,MAAA,CAAO,GAAP,CAAW,CAAC,EAAE,CAAC,IAAI,CAAC,QAApB,CAA6B,IAA7B;MALoC,CAAtC;aAOA,EAAA,CAAG,mDAAH,EAAwD,KAAA,CAAA,CAAA,GAAA;AACtD,YAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,kBAAA,EAAA,IAAA,EAAA;QAAA,kBAAA,GAAqB;QACrB,IAAA,GAAO,CAAA,MAAM,MAAM,CAAC,MAAP,CAAA,CAAN;QACP,IAAA,GAAO;QACP,IAAA,GAAO;QACP,KAAA,GAAQ,CAAA,MAAM,IAAI,CAAC,MAAL,CAAY,kBAAZ,EAAgC,IAAhC,EAAsC,IAAtC,EAA4C,IAA5C,CAAN;QACR,KAAA,GAAQ,CAAA,MAAM,IAAI,CAAC,MAAL,CAAY,kBAAZ,EAAgC,IAAhC,EAAsC,IAAtC,EAA4C,IAA5C,CAAN;eAER,MAAA,CAAO,KAAK,CAAC,OAAN,CAAc,KAAd,CAAP,CAA4B,CAAC,EAAE,CAAC,KAAhC,CAAsC,CAAtC;MARsD,CAAxD;IA/BoC,CAAtC;IAyCA,QAAA,CAAS,2BAAT,EAAsC,CAAA,CAAA,GAAA;AACpC,UAAA,IAAA,EAAA,OAAA,EAAA;MAAA,IAAA,GAAO,OAAA,CAAQ,SAAR;MACP,OAAA,GAAU;MACV,QAAA,GAAW;MAEX,EAAA,CAAG,+CAAH,EAAoD,KAAA,CAAA,CAAA,GAAA;AAClD,YAAA,SAAA,EAAA;QAAA,QAAA,GAAW;QACX,SAAA,GAAY,CAAA,MAAM,IAAI,CAAC,OAAL,CAAa,OAAb,EAAsB,QAAtB,CAAN;eAEZ,MAAA,CAAO,SAAS,CAAC,QAAV,CAAmB,KAAnB,CAAP,CAAiC,CAAC,EAAE,CAAC,KAArC,CAA2C,QAA3C;MAJkD,CAApD;MAMA,EAAA,CAAG,+CAAH,EAAoD,KAAA,CAAA,CAAA,GAAA;AAClD,YAAA,SAAA,EAAA;QAAA,QAAA,GAAW,4DAAA,GACT;QACF,SAAA,GAAY,CAAA,MAAM,IAAI,CAAC,OAAL,CAAa,OAAb,EAAsB,QAAtB,CAAN;eAEZ,MAAA,CAAO,SAAS,CAAC,QAAV,CAAmB,KAAnB,CAAP,CAAiC,CAAC,EAAE,CAAC,KAArC,CAA2C,QAA3C;MALkD,CAApD;aAOA,EAAA,CAAG,+CAAH,EAAoD,KAAA,CAAA,CAAA,GAAA;AAClD,YAAA,SAAA,EAAA;QAAA,QAAA,GAAW,4DAAA,GACT;QACF,SAAA,GAAY,CAAA,MAAM,IAAI,CAAC,OAAL,CAAa,OAAb,EAAsB,QAAtB,CAAN;eAEZ,MAAA,CAAO,SAAS,CAAC,QAAV,CAAmB,KAAnB,CAAP,CAAiC,CAAC,EAAE,CAAC,KAArC,CAA2C,QAA3C;MALkD,CAApD;IAlBoC,CAAtC;IAyBA,QAAA,CAAS,+BAAT,EAA0C,CAAA,CAAA,GAAA;AACxC,UAAA;MAAA,QAAA,GAAW,OAAA,CAAQ,aAAR,EAAX;;;;;aAMA,EAAA,CAAG,sCAAH,EAA2C,KAAA,CAAA,CAAA,GAAA;AACzC,YAAA,cAAA,EAAA,KAAA,EAAA;QAAA,MAAA,GAAS;QACT,cAAA,GAAiB,CAAA,MAAM,QAAQ,CAAC,IAAT,CAAc,MAAd,CAAN;QACjB,KAAA,GAAQ,CAAA,MAAM,QAAQ,CAAC,KAAT,CAAe,MAAf,EAAuB,cAAvB,CAAN;QAER,MAAA,CAAO,cAAP,CAAsB,CAAC,EAAE,CAAC,IAAI,CAAC,QAA/B,CAAwC,EAAxC;eACA,MAAA,CAAO,KAAP,CAAa,CAAC,EAAE,CAAC,EAAE,CAAC;MANqB,CAA3C;IAPwC,CAA1C;IAeA,QAAA,CAAS,2DAAT,EAAsE,CAAA,CAAA,GAAA;AACpE,UAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA,GAAA,EAAA;MAAA,GAAA,GAAM,OAAA,CAAQ,QAAR;MACN,MAAA,GAAS,OAAA,CAAQ,WAAR;MACT,MAAA,GAAS,OAAA,CAAQ,WAAR;MACT,YAAA,GAAe;MACf,MAAA,GACE;QAAA,QAAA,EAAU;MAAV;MAEF,EAAA,CAAG,+CAAH,EAAoD,KAAA,CAAA,CAAA,GAAA;AAClD,YAAA,OAAA,EAAA,MAAA,EAAA;QAAA,QAAA,GAAW,CAAA,MAAM,GAAG,CAAC,KAAK,CAAC,MAAV,CAAiB,YAAjB,EAA+B,MAA/B,CAAN;QACX,MAAA,GAAS,CAAA,MAAM,GAAG,CAAC,KAAK,CAAC,MAAV,CAAiB,YAAjB,EAA+B,QAA/B,CAAN;QACT,OAAA,GAAU,CAAA,MAAM,GAAG,CAAC,MAAJ,CAAW,QAAX,CAAN;QAEV,MAAA,CAAO,OAAO,CAAC,OAAO,CAAC,QAAvB,CAAgC,CAAC,EAAE,CAAC,KAApC,CAA0C,MAAM,CAAC,QAAjD;eACA,MAAA,CAAO,MAAP,CAAc,CAAC,EAAE,CAAC,EAAE,CAAC;MAN6B,CAApD;MAQA,EAAA,CAAG,+CAAH,EAAoD,KAAA,CAAA,CAAA,GAAA;AAClD,YAAA,OAAA,EAAA,MAAA,EAAA;QAAA,QAAA,GAAW,CAAA,MAAM,GAAG,CAAC,KAAK,CAAC,MAAV,CAAiB,YAAjB,EAA+B,MAA/B,CAAN;QACX,MAAA,GAAS,CAAA,MAAM,GAAG,CAAC,KAAK,CAAC,MAAV,CAAiB,YAAjB,EAA+B,QAA/B,CAAN;QACT,OAAA,GAAU,CAAA,MAAM,GAAG,CAAC,MAAJ,CAAW,QAAX,CAAN;QAEV,MAAA,CAAO,OAAO,CAAC,OAAO,CAAC,QAAvB,CAAgC,CAAC,EAAE,CAAC,KAApC,CAA0C,MAAM,CAAC,QAAjD;eACA,MAAA,CAAO,MAAP,CAAc,CAAC,EAAE,CAAC,EAAE,CAAC;MAN6B,CAApD;MAQA,EAAA,CAAG,+CAAH,EAAoD,KAAA,CAAA,CAAA,GAAA;AAClD,YAAA,OAAA,EAAA,IAAA,EAAA,MAAA,EAAA;QAAA,IAAA,GAAO,CAAA,MAAM,MAAM,CAAC,kBAAP,CAAA,CAAN;QACP,QAAA,GAAW,CAAA,MAAM,GAAG,CAAC,KAAK,CAAC,MAAV,CAAiB,IAAI,CAAC,UAAtB,EAAkC,MAAlC,CAAN;QACX,MAAA,GAAS,CAAA,MAAM,GAAG,CAAC,KAAK,CAAC,MAAV,CAAiB,IAAI,CAAC,SAAtB,EAAiC,QAAjC,CAAN;QACT,OAAA,GAAU,CAAA,MAAM,GAAG,CAAC,MAAJ,CAAW,QAAX,CAAN;QAEV,MAAA,CAAO,OAAO,CAAC,OAAO,CAAC,QAAvB,CAAgC,CAAC,EAAE,CAAC,KAApC,CAA0C,MAAM,CAAC,QAAjD;eACA,MAAA,CAAO,MAAP,CAAc,CAAC,EAAE,CAAC,EAAE,CAAC;MAP6B,CAApD;MASA,EAAA,CAAG,+CAAH,EAAoD,KAAA,CAAA,CAAA,GAAA;AAClD,YAAA,OAAA,EAAA,IAAA,EAAA,MAAA,EAAA;QAAA,IAAA,GAAO,CAAA,MAAM,MAAM,CAAC,kBAAP,CAAA,CAAN;QACP,QAAA,GAAW,CAAA,MAAM,GAAG,CAAC,KAAK,CAAC,MAAV,CAAiB,IAAI,CAAC,UAAtB,EAAkC,MAAlC,CAAN;QACX,MAAA,GAAS,CAAA,MAAM,GAAG,CAAC,KAAK,CAAC,MAAV,CAAiB,IAAI,CAAC,SAAtB,EAAiC,QAAjC,CAAN;QACT,OAAA,GAAU,CAAA,MAAM,GAAG,CAAC,MAAJ,CAAW,QAAX,CAAN;QAEV,MAAA,CAAO,OAAO,CAAC,OAAO,CAAC,QAAvB,CAAgC,CAAC,EAAE,CAAC,KAApC,CAA0C,MAAM,CAAC,QAAjD;eACA,MAAA,CAAO,MAAP,CAAc,CAAC,EAAE,CAAC,EAAE,CAAC;MAP6B,CAApD;MASA,EAAA,CAAG,4DAAH,EAAiE,KAAA,CAAA,CAAA,GAAA;AAC/D,YAAA,YAAA,EAAA,UAAA,EAAA,OAAA,EAAA;QAAA,UAAA,GAAa,CAAA,MAAM,MAAM,CAAC,kBAAP,CAAA,CAAN;QACb,YAAA,GAAe,CAAA,MAAM,MAAM,CAAC,kBAAP,CAAA,CAAN;QAEf,OAAA,GAAU,CAAA,MAAM,MAAM,CAAC,aAAP,CAAqB,UAAU,CAAC,UAAhC,EAA4C,YAAY,CAAC,SAAzD,CAAN;QACV,OAAA,GAAU,CAAA,MAAM,MAAM,CAAC,aAAP,CAAqB,YAAY,CAAC,UAAlC,EAA8C,UAAU,CAAC,SAAzD,CAAN;eAEV,MAAA,CAAO,MAAM,CAAC,OAAP,CAAe,OAAf,EAAwB,OAAxB,CAAP,CAAwC,CAAC,EAAE,CAAC,KAA5C,CAAkD,CAAlD;MAP+D,CAAjE;MASA,EAAA,CAAG,4DAAH,EAAiE,KAAA,CAAA,CAAA,GAAA;AAC/D,YAAA,YAAA,EAAA,UAAA,EAAA,OAAA,EAAA;QAAA,UAAA,GAAa,CAAA,MAAM,MAAM,CAAC,kBAAP,CAAA,CAAN;QACb,YAAA,GAAe,CAAA,MAAM,MAAM,CAAC,kBAAP,CAAA,CAAN;QAEf,OAAA,GAAU,CAAA,MAAM,MAAM,CAAC,aAAP,CAAqB,UAAU,CAAC,UAAhC,EAA4C,YAAY,CAAC,SAAzD,CAAN;QACV,OAAA,GAAU,CAAA,MAAM,MAAM,CAAC,aAAP,CAAqB,YAAY,CAAC,UAAlC,EAA8C,UAAU,CAAC,SAAzD,CAAN;eAEV,MAAA,CAAO,MAAM,CAAC,OAAP,CAAe,OAAf,EAAwB,OAAxB,CAAP,CAAwC,CAAC,EAAE,CAAC,KAA5C,CAAkD,CAAlD;MAP+D,CAAjE;MASA,EAAA,CAAG,2DAAH,EAAgE,KAAA,CAAA,CAAA,GAAA;AAC9D,YAAA,OAAA,EAAA,OAAA,EAAA,SAAA,EAAA;QAAA,OAAA,GAAU;QACV,OAAA,GAAU,CAAA,MAAM,MAAM,CAAC,kBAAP,CAAA,CAAN;QACV,SAAA,GAAY,CAAA,MAAM,MAAM,CAAC,WAAP,CAAmB,OAAnB,EAA4B,OAAO,CAAC,UAApC,CAAN;QACZ,MAAA,GAAS,CAAA,MAAM,MAAM,CAAC,sBAAP,CAA8B,OAA9B,EAAuC,SAAvC,EAAkD,OAAO,CAAC,SAA1D,CAAN;eAET,MAAA,CAAO,MAAP,CAAc,CAAC,EAAE,CAAC,EAAE,CAAC;MANyC,CAAhE;MAQA,EAAA,CAAG,2DAAH,EAAgE,KAAA,CAAA,CAAA,GAAA;AAC9D,YAAA,OAAA,EAAA,OAAA,EAAA,SAAA,EAAA;QAAA,OAAA,GAAU;QACV,OAAA,GAAU,CAAA,MAAM,MAAM,CAAC,kBAAP,CAAA,CAAN;QACV,SAAA,GAAY,CAAA,MAAM,MAAM,CAAC,WAAP,CAAmB,OAAnB,EAA4B,OAAO,CAAC,UAApC,CAAN;QACZ,MAAA,GAAS,CAAA,MAAM,MAAM,CAAC,sBAAP,CAA8B,OAA9B,EAAuC,SAAvC,EAAkD,OAAO,CAAC,SAA1D,CAAN;eAET,MAAA,CAAO,MAAP,CAAc,CAAC,EAAE,CAAC,EAAE,CAAC;MANyC,CAAhE;MAQA,EAAA,CAAG,uEAAH,EAA4E,KAAA,CAAA,CAAA,GAAA;AAC1E,YAAA,GAAA,EAAA,IAAA,EAAA,OAAA,EAAA,IAAA,EAAA;QAAA,OAAA,GAAU,CAAA,MAAM,MAAM,CAAC,kBAAP,CAAA,CAAN;QACV,GAAA,GAAM,CAAA,MAAM,MAAM,CAAC,eAAP,CAAuB,OAAO,CAAC,UAA/B,CAAN;QACN,IAAA,GAAO,CAAA,MAAM,MAAM,CAAC,eAAP,CAAuB,GAAG,CAAC,UAA3B,CAAN;QACP,IAAA,GAAO,CAAA,MAAM,MAAM,CAAC,eAAP,CAAuB,IAAI,CAAC,UAA5B,CAAN;QACP,KAAA,GAAQ,CAAA,MAAM,MAAM,CAAC,eAAP,CAAuB,IAAI,CAAC,UAA5B,CAAN;QAER,MAAA,CAAO,GAAG,CAAC,UAAU,CAAC,CAAtB,CAAwB,CAAC,EAAE,CAAC,KAA5B,CAAkC,IAAI,CAAC,UAAU,CAAC,CAAlD;QACA,MAAA,CAAO,GAAG,CAAC,UAAU,CAAC,CAAtB,CAAwB,CAAC,EAAE,CAAC,KAA5B,CAAkC,IAAI,CAAC,UAAU,CAAC,CAAlD;QACA,MAAA,CAAO,GAAG,CAAC,UAAU,CAAC,CAAtB,CAAwB,CAAC,EAAE,CAAC,KAA5B,CAAkC,IAAI,CAAC,UAAU,CAAC,CAAlD;QACA,MAAA,CAAO,GAAG,CAAC,SAAS,CAAC,CAArB,CAAuB,CAAC,EAAE,CAAC,KAA3B,CAAiC,IAAI,CAAC,SAAS,CAAC,CAAhD;QACA,MAAA,CAAO,GAAG,CAAC,SAAS,CAAC,CAArB,CAAuB,CAAC,EAAE,CAAC,KAA3B,CAAiC,IAAI,CAAC,SAAS,CAAC,CAAhD;QACA,MAAA,CAAO,IAAI,CAAC,UAAZ,CAAuB,CAAC,EAAE,CAAC,KAA3B,CAAiC,KAAK,CAAC,UAAvC;eACA,MAAA,CAAO,IAAI,CAAC,SAAZ,CAAsB,CAAC,EAAE,CAAC,KAA1B,CAAgC,KAAK,CAAC,SAAtC;MAb0E,CAA5E;aAeA,EAAA,CAAG,uEAAH,EAA4E,KAAA,CAAA,CAAA,GAAA;AAC1E,YAAA,GAAA,EAAA,IAAA,EAAA,OAAA,EAAA,IAAA,EAAA;QAAA,OAAA,GAAU,CAAA,MAAM,MAAM,CAAC,kBAAP,CAAA,CAAN;QACV,GAAA,GAAM,CAAA,MAAM,MAAM,CAAC,eAAP,CAAuB,OAAO,CAAC,UAA/B,CAAN;QACN,IAAA,GAAO,CAAA,MAAM,MAAM,CAAC,eAAP,CAAuB,GAAG,CAAC,UAA3B,CAAN;QACP,IAAA,GAAO,CAAA,MAAM,MAAM,CAAC,eAAP,CAAuB,IAAI,CAAC,UAA5B,CAAN;QACP,KAAA,GAAQ,CAAA,MAAM,MAAM,CAAC,eAAP,CAAuB,IAAI,CAAC,UAA5B,CAAN;QAER,MAAA,CAAO,GAAG,CAAC,UAAU,CAAC,CAAtB,CAAwB,CAAC,EAAE,CAAC,KAA5B,CAAkC,IAAI,CAAC,UAAU,CAAC,CAAlD;QACA,MAAA,CAAO,GAAG,CAAC,UAAU,CAAC,CAAtB,CAAwB,CAAC,EAAE,CAAC,KAA5B,CAAkC,IAAI,CAAC,UAAU,CAAC,CAAlD;QACA,MAAA,CAAO,GAAG,CAAC,UAAU,CAAC,CAAtB,CAAwB,CAAC,EAAE,CAAC,KAA5B,CAAkC,IAAI,CAAC,UAAU,CAAC,CAAlD;QACA,MAAA,CAAO,GAAG,CAAC,SAAS,CAAC,CAArB,CAAuB,CAAC,EAAE,CAAC,KAA3B,CAAiC,IAAI,CAAC,SAAS,CAAC,CAAhD;QACA,MAAA,CAAO,GAAG,CAAC,SAAS,CAAC,CAArB,CAAuB,CAAC,EAAE,CAAC,KAA3B,CAAiC,IAAI,CAAC,SAAS,CAAC,CAAhD;QACA,MAAA,CAAO,IAAI,CAAC,UAAZ,CAAuB,CAAC,EAAE,CAAC,KAA3B,CAAiC,KAAK,CAAC,UAAvC;eACA,MAAA,CAAO,IAAI,CAAC,SAAZ,CAAsB,CAAC,EAAE,CAAC,KAA1B,CAAgC,KAAK,CAAC,SAAtC;MAb0E,CAA5E;IA3FoE,CAAtE;WA0GA,QAAA,CAAS,yBAAT,EAAoC,CAAA,CAAA,GAAA;AAClC,UAAA;MAAA,KAAA,GAAQ,OAAA,CAAQ,UAAR;MACR,MAAA,GAAS,OAAA,CAAQ,WAAR;MAET,EAAA,CAAG,uCAAH,EAA4C,KAAA,CAAA,CAAA,GAAA;AAC1C,YAAA;QAAA,UAAA,GAAa,CAAA,MAAM,KAAK,CAAC,MAAN,CAAA,CAAN;eACb,MAAA,CAAO,UAAP,CAAkB,CAAC,EAAE,CAAC,IAAI,CAAC,QAA3B,CAAoC,EAApC;MAF0C,CAA5C;MAIA,EAAA,CAAG,2CAAH,EAAgD,KAAA,CAAA,CAAA,GAAA;AAC9C,YAAA,cAAA,EAAA,UAAA,EAAA;QAAA,SAAA,GAAY,CAAA,MAAM,MAAM,CAAC,YAAP,CAAA,CAAN;QACZ,UAAA,GAAa,CAAA,MAAM,KAAK,CAAC,MAAN,CAAa,SAAb,CAAN;QACb,cAAA,GAAiB,CAAA,MAAM,KAAK,CAAC,KAAN,CAAY,UAAZ,CAAN;QACjB,MAAA,CAAO,cAAc,CAAC,SAAtB,CAAgC,CAAC,EAAE,CAAC,KAApC,CAA0C,SAA1C;QACA,MAAA,CAAO,cAAP,CAAsB,CAAC,EAAE,CAAC,IAAI,CAAC,QAA/B,CAAwC,OAAxC;QACA,MAAA,CAAO,cAAP,CAAsB,CAAC,EAAE,CAAC,IAAI,CAAC,QAA/B,CAAwC,MAAxC;eACA,MAAA,CAAO,cAAP,CAAsB,CAAC,EAAE,CAAC,IAAI,CAAC,QAA/B,CAAwC,SAAxC;MAP8C,CAAhD;aASA,EAAA,CAAG,sEAAH,EAA2E,KAAA,CAAA,CAAA,GAAA;AACzE,YAAA,MAAA,EAAA,CAAA,EAAA,CAAA,EAAA,UAAA,EAAA;QAAA,MAAA,GAAS;QAET,KAAS,4BAAT;UACE,UAAA,GAAa,CAAA,MAAM,KAAK,CAAC,MAAN,CAAA,CAAN;UACb,MAAM,CAAC,IAAP,CAAY,UAAZ;QAFF;QAIA,MAAA,GAAS,MAAM,CAAC,IAAP,CAAY,CAAC,CAAD,EAAI,CAAJ,CAAA,GAAA;UACnB,IAAG,CAAA,GAAI,CAAP;AACE,mBAAO,EADT;WAAA,MAEK,IAAG,CAAA,GAAI,CAAP;AACH,mBAAO,CAAC,EADL;WAAA,MAAA;AAGH,mBAAO,EAHJ;;QAHc,CAAZ;eAQT,MAAA,CAAO,MAAP,CAAc,CAAC,EAAE,CAAC,KAAlB,CAAwB,MAAxB;MAfyE,CAA3E;IAjBkC,CAApC;EA9PsD,CAAxD;AAFA",
  "sourcesContent": [
    "expect = require(\"chai\").expect\n\ndescribe \"Specification tests for the helper methods.\", () =>\n  common = require \"../common\"\n\n  describe \"Testing the common library.\", () =>\n    it \"Should generate a random string.\", () =>\n      str1 = await common.random()\n      str2 = await common.random()\n\n      expect(str1.toString(\"hex\")).to.not.equal(str2.toString(\"hex\"))\n      expect(str1).to.have.lengthOf(16)\n      expect(str2).to.have.lengthOf(16)\n\n    it \"Should generate a random number between a given range.\", () =>\n      low = 1\n      high = 20\n      num1 = await common.randomNumber(low, high)\n      expect(num1).is.within(low, high)\n\n  describe \"Testing the bas64 library.\", () =>\n    base64 = require \"../base64\"\n\n    it \"Should URL encode then decode a string correctly.\", () =>\n      text = \"hello world\"\n      specimen = \"aGVsbG8gd29ybGQ\"\n\n      encoded = await base64.urlEncode(text)\n      decoded = await base64.urlDecode(encoded)\n\n      expect(specimen).to.equal(encoded)\n      expect(decoded).to.equal(text)\n\n  describe \"Testing the aesgcm256 library.\", () =>\n    aes = require \"../aesgcm256\"\n\n    it \"Should encrypt and decrypt a string correctly.\", () =>\n      password = \"This is a secret\"\n      text = \"Nobody should know what this message says.\"\n\n      cipherText = await aes.encrypt(text, password)\n      decipherText = await aes.decrypt(cipherText, password)\n\n      expect(decipherText).to.equal(text)\n\n  describe \"Testing the hash library.\", () =>\n    hash = require \"../hash\"\n    text = \"hello world\"\n\n    it \"Should calculate the sha256 correctly.\", () =>\n      specimen = \"b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\"\n      h = await hash.sha256(text)\n\n      expect(h.toString(\"hex\")).to.equal(specimen)\n\n    it \"Should calculate the sha384 correctly.\", () =>\n      specimen = \"fdbd8e75a67f29f701a4e040385e2e23986303ea10239211af907fcbb8\" +\n        \"3578b3e417cb71ce646efd0819dd8c088de1bd\"\n      h = await hash.sha384(text)\n\n      expect(h.toString(\"hex\")).to.equal(specimen)\n\n    it \"Should calculate the sha512 correctly.\", () =>\n      specimen = \"309ecc489c12d6eb4cc40f50c902f2b4d0ed77ee511a7c7a9bcd3ca86d\" +\n        \"4cd86f989dd35bc5ff499670da34255b45b0cfd830e81f605dcf7dc5542e93ae9cd76f\"\n      h = await hash.sha512(text)\n\n      expect(h.toString(\"hex\")).to.equal(specimen)\n\n  describe \"Testing the hkdf library.\", () =>\n    hkdf = require \"../hkdf\"\n\n    it \"Should derive a 64-byte value.\", () =>\n      initialKeyMaterial = \"This is a secret\"\n      size = 64\n      str = await hkdf.derive(initialKeyMaterial, size)\n\n      expect(str).to.have.lengthOf(size)\n\n    it \"Should derive a 128-byte value.\", () =>\n      initialKeyMaterial = \"This is a secret\"\n      size = 128\n      str = await hkdf.derive(initialKeyMaterial, size)\n\n      expect(str).to.have.lengthOf(size)\n\n    it \"Should derive a 256-byte value.\", () =>\n      initialKeyMaterial = \"This is a secret\"\n      size = 256\n      str = await hkdf.derive(initialKeyMaterial, size)\n\n      expect(str).to.have.lengthOf(size)\n\n    it \"Should derive a 512-byte value.\", () =>\n      initialKeyMaterial = \"This is a secret\"\n      size = 512\n      str = await hkdf.derive(initialKeyMaterial, size)\n\n      expect(str).to.have.lengthOf(size)\n\n    it \"Should derive repeatable values with same inputs.\", () =>\n      initialKeyMaterial = \"This is a secret.\"\n      salt = await common.random()\n      info = \"name=unit-test\"\n      size = 64\n      hkdf1 = await hkdf.derive(initialKeyMaterial, size, salt, info)\n      hkdf2 = await hkdf.derive(initialKeyMaterial, size, salt, info)\n\n      expect(hkdf1.compare(hkdf2)).to.equal(0)\n\n  describe \"Testing the hmac library.\", () =>\n    hmac = require \"../hmac\"\n    message = \"This is a top secret message.\"\n    password = \"This is a secret\"\n\n    it \"Should calculate hmac using sha256 correctly.\", () =>\n      specimen = \"634bb279a3d5d77677665c2a5c2c42bd89b93d216085c16429b65563f7945b58\"\n      signature = await hmac.hmac256(message, password)\n\n      expect(signature.toString(\"hex\")).to.equal(specimen)\n\n    it \"Should calculate hmac using sha384 correctly.\", () =>\n      specimen = \"a1525f3b138f83de947282862fbc4497d1e3ada37e0478562deea07ee6\" +\n        \"9391abb82d278448dac4dcbd977707c6e610fb\"\n      signature = await hmac.hmac384(message, password)\n\n      expect(signature.toString(\"hex\")).to.equal(specimen)\n\n    it \"Should calculate hmac using sha512 correctly.\", () =>\n      specimen = \"ac0c888d0f4b4753a9ffaf1fc732b2a8c814752f43fde826a3bc1c9373\" +\n        \"f765b5d1914fee1f95448ff3287953750f9e68ab3aae6cd7a98a3745d3ebce4cc63248\"\n      signature = await hmac.hmac512(message, password)\n\n      expect(signature.toString(\"hex\")).to.equal(specimen)\n\n  describe \"Testing the password library.\", () =>\n    password = require \"../password\"\n\n    ###\n    This test is the slowest. Most likely it is because scrypt is a slow\n    password hashing algorithm in Node.js.\n    ###\n    it \"Should hash and verify the password.\", () =>\n      secret = \"This is my password\"\n      hashedPassword = await password.hash(secret)\n      match = await password.match(secret, hashedPassword)\n\n      expect(hashedPassword).to.have.lengthOf(96)\n      expect(match).to.be.true\n\n  describe \"Testing the jwt, ecc384, and ecc521 libraries in concert.\", () =>\n    jwt = require \"../jwt\"\n    ecc384 = require \"../ecc384\"\n    ecc521 = require \"../ecc521\"\n    sharedSecret = \"This is a secret\"\n    claims =\n      username: \"unit-test\"\n\n    it \"Should generate a valid HS384 JSON Web Token.\", () =>\n      webToken = await jwt.hs384.create(sharedSecret, claims)\n      verify = await jwt.hs384.verify(sharedSecret, webToken)\n      decoded = await jwt.decode(webToken)\n\n      expect(decoded.payload.username).to.equal(claims.username)\n      expect(verify).to.be.true\n\n    it \"Should generate a valid HS512 JSON Web Token.\", () =>\n      webToken = await jwt.hs512.create(sharedSecret, claims)\n      verify = await jwt.hs512.verify(sharedSecret, webToken)\n      decoded = await jwt.decode(webToken)\n\n      expect(decoded.payload.username).to.equal(claims.username)\n      expect(verify).to.be.true\n\n    it \"Should generate a valid ES384 JSON Web Token.\", () =>\n      pems = await ecc384.generatePemKeyPair()\n      webToken = await jwt.es384.create(pems.privateKey, claims)\n      verify = await jwt.es384.verify(pems.publicKey, webToken)\n      decoded = await jwt.decode(webToken)\n\n      expect(decoded.payload.username).to.equal(claims.username)\n      expect(verify).to.be.true\n\n    it \"Should generate a valid ES512 JSON Web Token.\", () =>\n      pems = await ecc521.generatePemKeyPair()\n      webToken = await jwt.es512.create(pems.privateKey, claims)\n      verify = await jwt.es512.verify(pems.publicKey, webToken)\n      decoded = await jwt.decode(webToken)\n\n      expect(decoded.payload.username).to.equal(claims.username)\n      expect(verify).to.be.true\n\n    it \"Should be able to compute a secret using ECDHE and Sha384.\", () =>\n      bobKeyPair = await ecc384.generatePemKeyPair()\n      aliceKeyPair = await ecc384.generatePemKeyPair()\n\n      secret1 = await ecc384.computeSecret(bobKeyPair.privateKey, aliceKeyPair.publicKey)\n      secret2 = await ecc384.computeSecret(aliceKeyPair.privateKey, bobKeyPair.publicKey)\n\n      expect(Buffer.compare(secret1, secret2)).to.equal(0)\n\n    it \"Should be able to compute a secret using ECDHE and Sha512.\", () =>\n      bobKeyPair = await ecc521.generatePemKeyPair()\n      aliceKeyPair = await ecc521.generatePemKeyPair()\n\n      secret1 = await ecc521.computeSecret(bobKeyPair.privateKey, aliceKeyPair.publicKey)\n      secret2 = await ecc521.computeSecret(aliceKeyPair.privateKey, bobKeyPair.publicKey)\n\n      expect(Buffer.compare(secret1, secret2)).to.equal(0)\n\n    it \"Should sign and verify a message signed with a P-384 key.\", () =>\n      message = \"This is a message that was not tampered with.\"\n      keyPair = await ecc384.generatePemKeyPair()\n      signature = await ecc384.signPayload(message, keyPair.privateKey)\n      verify = await ecc384.verifyPayloadSignature(message, signature, keyPair.publicKey)\n\n      expect(verify).to.be.true\n\n    it \"Should sign and verify a message signed with a P-521 key.\", () =>\n      message = \"This is a message that was not tampered with.\"\n      keyPair = await ecc521.generatePemKeyPair()\n      signature = await ecc521.signPayload(message, keyPair.privateKey)\n      verify = await ecc521.verifyPayloadSignature(message, signature, keyPair.publicKey)\n\n      expect(verify).to.be.true\n\n    it \"Should be able to convert keys between PEM and JWK when using ecc384.\", () =>\n      keyPair = await ecc384.generatePemKeyPair()\n      jwk = await ecc384.convertPemToJwk(keyPair.privateKey)\n      pems = await ecc384.convertJwkToPem(jwk.privateKey)\n      jwk2 = await ecc384.convertPemToJwk(pems.privateKey)\n      pems2 = await ecc384.convertJwkToPem(jwk2.privateKey)\n\n      expect(jwk.privateKey.x).to.equal(jwk2.privateKey.x)\n      expect(jwk.privateKey.y).to.equal(jwk2.privateKey.y)\n      expect(jwk.privateKey.d).to.equal(jwk2.privateKey.d)\n      expect(jwk.publicKey.x).to.equal(jwk2.publicKey.x)\n      expect(jwk.publicKey.y).to.equal(jwk2.publicKey.y)\n      expect(pems.privateKey).to.equal(pems2.privateKey)\n      expect(pems.publicKey).to.equal(pems2.publicKey)\n\n    it \"Should be able to convert keys between PEM and JWK when using ecc521.\", () =>\n      keyPair = await ecc521.generatePemKeyPair()\n      jwk = await ecc521.convertPemToJwk(keyPair.privateKey)\n      pems = await ecc521.convertJwkToPem(jwk.privateKey)\n      jwk2 = await ecc521.convertPemToJwk(pems.privateKey)\n      pems2 = await ecc521.convertJwkToPem(jwk2.privateKey)\n\n      expect(jwk.privateKey.x).to.equal(jwk2.privateKey.x)\n      expect(jwk.privateKey.y).to.equal(jwk2.privateKey.y)\n      expect(jwk.privateKey.d).to.equal(jwk2.privateKey.d)\n      expect(jwk.publicKey.x).to.equal(jwk2.publicKey.x)\n      expect(jwk.publicKey.y).to.equal(jwk2.publicKey.y)\n      expect(pems.privateKey).to.equal(pems2.privateKey)\n      expect(pems.publicKey).to.equal(pems2.publicKey)\n\n  describe \"Test the ksuid library.\", () =>\n    ksuid = require \"../ksuid\"\n    common = require \"../common\"\n\n    it \"Should generate a 27-character KSUID.\", () =>\n      ksuidValue = await ksuid.create()\n      expect(ksuidValue).to.have.lengthOf(27)\n\n    it \"Should have the expected timestamp value.\", () =>\n      timestamp = await common.utcTimestamp()\n      ksuidValue = await ksuid.create timestamp\n      componentParts = await ksuid.parse ksuidValue\n      expect(componentParts.timestamp).to.equal(timestamp)\n      expect(componentParts).to.have.property(\"ksuid\")\n      expect(componentParts).to.have.property(\"time\")\n      expect(componentParts).to.have.property(\"payload\")\n\n    it \"Should generate several KSUID values that are sorted alphabetically.\", () =>\n      bucket = []\n\n      for i in [1..100]\n        ksuidValue = await ksuid.create()\n        bucket.push ksuidValue\n\n      sorted = bucket.sort (a, b) =>\n        if a > b\n          return 1\n        else if a < b\n          return -1\n        else\n          return 0\n\n      expect(sorted).to.equal(bucket)\n"
  ]
}