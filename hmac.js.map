{
  "version": 3,
  "file": "hmac.js",
  "sourceRoot": "",
  "sources": [
    "coffeescripts/hmac.coffee"
  ],
  "names": [],
  "mappings": "AAAA;AAAA,MAAA,MAAA,EAAA;;EAAA,MAAA,GAAS,OAAA,CAAQ,QAAR;;EAET,IAAA,GAAO,CAAC,MAAD,EAAS,IAAT,EAAe,MAAf,CAAA,GAAA;WACL,IAAI,OAAJ,CAAY,CAAC,OAAD,EAAU,MAAV,CAAA,GAAA;aACV,OAAA,CAAQ,MAAM,CAAC,UAAP,CAAkB,MAAlB,EAA0B,MAA1B,CAAiC,CAAC,MAAlC,CAAyC,IAAzC,CAA8C,CAAC,MAA/C,CAAA,CAAR;IADU,CAAZ;EADK;;EAIP,MAAM,CAAC,OAAP,GAQE,CAAA;;;;;;;;IAAA,OAAA,EAAS,CAAC,IAAD,EAAO,MAAP,CAAA,GAAA;aACP,OAAO,CAAC,OAAR,CAAgB,IAAA,CAAK,QAAL,EAAe,IAAf,EAAqB,MAArB,CAAhB;IADO,CAAT;;;;;;;;IAUA,OAAA,EAAS,CAAC,IAAD,EAAO,MAAP,CAAA,GAAA;aACP,OAAO,CAAC,OAAR,CAAgB,IAAA,CAAK,QAAL,EAAe,IAAf,EAAqB,MAArB,CAAhB;IADO,CAVT;;;;;;;;IAoBA,OAAA,EAAS,CAAC,IAAD,EAAO,MAAP,CAAA,GAAA;aACP,OAAO,CAAC,OAAR,CAAgB,IAAA,CAAK,QAAL,EAAe,IAAf,EAAqB,MAArB,CAAhB;IADO;EApBT;AAdF",
  "sourcesContent": [
    "crypto = require \"crypto\"\n\nhmac = (digest, text, secret) =>\n  new Promise (resolve, reject) =>\n    resolve crypto.createHmac(digest, secret).update(text).digest()\n\nmodule.exports =\n  ###*\n   * Compute an HMAC using SHA-256 of a given string.\n   *\n   * @param {string} text - The text to calculate into a hash.\n   * @param {string} secret - The shared secret.\n   * @returns {Buffer}\n  ###\n  hmac256: (text, secret) =>\n    Promise.resolve hmac(\"sha256\", text, secret)\n\n  ###*\n   * Compute an HMAC using SHA-384 of a given string.\n   *\n   * @param {string} text - The text to calculate into a hash.\n   * @param {string} secret - The shared secret.\n   * @returns {Buffer}\n  ###\n  hmac384: (text, secret) =>\n    Promise.resolve hmac(\"sha384\", text, secret)\n\n  ###*\n   * Compute an HMAC using SHA-512 of a given string.\n   *\n   * @param {string} text - The text to calculate into a hash.\n   * @param {string} secret - The shared secret.\n   * @returns {Buffer}\n  ###\n  hmac512: (text, secret) =>\n    Promise.resolve hmac(\"sha512\", text, secret)\n"
  ]
}