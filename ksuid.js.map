{
  "version": 3,
  "file": "ksuid.js",
  "sourceRoot": "",
  "sources": [
    "coffeescripts/ksuid.coffee"
  ],
  "names": [],
  "mappings": "AAAA;AAAA,MAAA,UAAA,EAAA,KAAA,EAAA,yBAAA,EAAA,UAAA,EAAA,kBAAA,EAAA,oBAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA;;EAAA,UAAA,GAAa;;EACb,KAAA,GAAQ;;EACR,yBAAA,GAA2B;;EAC3B,oBAAA,GAAuB;;EACvB,kBAAA,GAAqB;;EACrB,UAAA,GAAa,oBAAA,GAAuB;;EAEpC,MAAA,GAAS,OAAA,CAAQ,QAAR,CAAA,CAAkB,UAAlB;;EACT,MAAA,GAAS,OAAA,CAAQ,QAAR;;EACT,MAAA,GAAS,OAAA,CAAQ,UAAR;;EACT,IAAA,GAAO,OAAA,CAAQ,QAAR;;EAEP,MAAM,CAAC,OAAP,GAOE,CAAA;;;;;;;IAAA,MAAA,EAAQ,CAAC,gBAAgB,IAAjB,CAAA,GAAA;aACN,IAAI,OAAJ,CAAY,KAAA,CAAC,OAAD,EAAU,MAAV,CAAA,GAAA;AACV,YAAA,MAAA,EAAA,QAAA,EAAA,GAAA,EAAA,OAAA,EAAA,SAAA,EAAA;QAAA,IAAG,aAAA,KAAiB,IAApB;UACE,GAAA,GAAM,CAAA,MAAM,MAAM,CAAC,YAAP,CAAA,CAAN,EADR;SAAA,MAAA;UAGE,GAAA,GAAM,cAHR;;QAKA,GAAA,GAAM,CAAA,MAAM,MAAM,CAAC,MAAP,CAAA,CAAN;QACN,OAAA,GAAU,CAAA,MAAM,IAAI,CAAC,MAAL,CAAY,GAAZ,EAAiB,kBAAjB,CAAN;QACV,SAAA,GAAY,MAAM,CAAC,WAAP,CAAmB,oBAAnB;QACZ,SAAS,CAAC,YAAV,CAAuB,GAAvB,EAA4B,CAA5B;QACA,MAAA,GAAS,MAAM,CAAC,MAAP,CAAc,CAAC,SAAD,EAAY,OAAZ,CAAd,EAAoC,UAApC;QACT,QAAA,GAAW,MAAM,CAAC,MAAP,CAAc,MAAd;QAEX,IAAG,QAAQ,CAAC,MAAT,KAAmB,yBAAtB;iBACE,OAAA,CAAQ,QAAR,EADF;SAAA,MAAA;iBAGE,OAAA,CAAQ,QAAQ,CAAC,KAAT,CAAe,CAAf,EAAkB,yBAAlB,CAAR,EAHF;;MAbU,CAAZ;IADM,CAAR;;;;;;;IAyBA,KAAA,EAAO,CAAC,UAAD,CAAA,GAAA;aACL,IAAI,OAAJ,CAAY,CAAC,OAAD,EAAU,MAAV,CAAA,GAAA;AACV,YAAA,MAAA,EAAA,aAAA,EAAA,eAAA,EAAA;QAAA,IAAG,UAAU,CAAC,MAAX,KAAuB,yBAA1B;UACE,MAAA,CAAO,IAAI,KAAJ,CAAU,2CAAV,CAAP,EADF;;QAGA,MAAA,GAAS,MAAM,CAAC,MAAP,CAAc,UAAd;QACT,eAAA,GAAkB,MAAM,CAAC,KAAP,CAAa,CAAb,EAAgB,oBAAhB;QAClB,aAAA,GAAgB,MAAM,CAAC,KAAP,CAAa,oBAAb,EAAmC,kBAAnC;QAChB,GAAA,GAAM,eAAe,CAAC,WAAhB,CAA4B,CAA5B;eAEN,OAAA,CAAQ;UACN,KAAA,EAAO,UADD;UAEN,IAAA,EAAM,IAAI,IAAJ,CAAS,GAAA,GAAM,IAAf,CAFA;UAGN,SAAA,EAAW,GAHL;UAIN,OAAA,EAAS;QAJH,CAAR;MATU,CAAZ;IADK;EAzBP;AAnBF",
  "sourcesContent": [
    "CHARACTERS = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\nEPOCH = 1546300800\nMAX_ENCODED_STRING_LENGTH= 27\nTIMESTAMP_MAX_LENGTH = 4\nPAYLOAD_MAX_LENGTH = 16\nMAX_LENGTH = TIMESTAMP_MAX_LENGTH + PAYLOAD_MAX_LENGTH\n\nbase62 = require(\"base-x\")(CHARACTERS)\ncrypto = require \"crypto\"\ncommon = require \"./common\"\nhkdf = require \"./hkdf\"\n\nmodule.exports =\n  ###*\n   * Create a new KSUID.\n   *\n   * @param {number} unixTimestamp - The UNIX timestamp to use.\n   * @returns {string} The KSUID value.\n  ###\n  create: (unixTimestamp = null) =>\n    new Promise (resolve, reject) =>\n      if unixTimestamp is null\n        utc = await common.utcTimestamp()\n      else\n        utc = unixTimestamp\n\n      ikm = await common.random()\n      payload = await hkdf.derive ikm, PAYLOAD_MAX_LENGTH\n      timestamp = Buffer.allocUnsafe TIMESTAMP_MAX_LENGTH\n      timestamp.writeInt32BE utc, 0\n      buffer = Buffer.concat [timestamp, payload], MAX_LENGTH\n      contents = base62.encode buffer\n\n      if contents.length is MAX_ENCODED_STRING_LENGTH\n        resolve contents\n      else\n        resolve contents.slice 0, MAX_ENCODED_STRING_LENGTH\n\n  ###*\n   * Parse a KSUID value and return its component parts.\n   *\n   * @param {string} ksuidValue - The KSUID value to parse.\n   * @returns {Object} The component parts of the KSUID.\n  ###\n  parse: (ksuidValue) =>\n    new Promise (resolve, reject) =>\n      if ksuidValue.length isnt MAX_ENCODED_STRING_LENGTH\n        reject new Error \"ksuidValue does not appear to be a KSUID.\"\n\n      buffer = base62.decode ksuidValue\n      timestampBuffer = buffer.slice 0, TIMESTAMP_MAX_LENGTH\n      payloadBuffer = buffer.slice TIMESTAMP_MAX_LENGTH, PAYLOAD_MAX_LENGTH\n      utc = timestampBuffer.readInt32BE 0\n\n      resolve {\n        ksuid: ksuidValue\n        time: new Date utc * 1000\n        timestamp: utc\n        payload: payloadBuffer\n      }\n"
  ]
}