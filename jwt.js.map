{
  "version": 3,
  "file": "jwt.js",
  "sourceRoot": "",
  "sources": [
    "coffeescripts/jwt.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "jws = require \"jws\"\nbase64 = require \"./base64\"\ncommon = require \"./common\"\n\ndecode = (jsonWebToken) =>\n  new Promise (resolve, reject) =>\n    parts = jsonWebToken.split(\".\")\n\n    if parts.length < 2\n      reject new Error(\"Invalid JSON web token.\")\n\n    decoded = {}\n\n    try\n      decoded.header = JSON.parse(await base64.urlDecode(parts[0]))\n      decoded.payload = JSON.parse(await base64.urlDecode(parts[1]))\n    catch err\n      reject err\n\n    if parts[2] isnt undefined\n      decoded.signature = parts[2]\n\n    resolve decoded\n\ncreate = (algorithm, secretOrPrivateKey, claims = {}) =>\n  new Promise (resolve, reject) =>\n    header =\n      alg: algorithm\n      typ: \"JWT\"\n\n    if claims.iss is undefined\n      claims.iss = \"urn:iss:crypto-helper\"\n\n    if claims.aud is undefined\n      claims.aud = \"urn:aud:any-client\"\n\n    if claims.exp is undefined\n      # Expire in 10-minutes\n      claims.exp = Math.round((new Date().getTime()) / 1000) + (60 * 10)\n\n    currentTime = Math.round((new Date().getTime()) / 1000)\n    claims.iat = currentTime\n    claims.nbf = currentTime\n    claims.jti = (await common.randomString()).toString(\"hex\")\n\n    try\n      resolve jws.sign({\n        header: header\n        payload: claims\n        secret: secretOrPrivateKey\n      })\n    catch err\n      reject err\n\nverify = (algorithm, secretOrPublicKey, jsonWebToken) =>\n  new Promise (resolve, reject) =>\n    # Make sure we have a valid JSON Web Token\n    if typeof jsonWebToken isnt \"string\"\n      reject new Error(\"jsonWebToken must be a string.\")\n\n    decoded = await decode(jsonWebToken)\n    claims = decoded.payload\n    currentTime = Math.round new Date().getTime()\n\n    if claims?.exp isnt undefined\n      expiration = claims.exp * 1000\n      if expiration <= currentTime\n        reject new Error(\"The token has expired.\")\n\n    # Validate the signature\n    try\n      resolve jws.verify(jsonWebToken, algorithm, secretOrPublicKey)\n    catch err\n      reject err\n\n\nmodule.exports =\n  decode: decode\n\n  es384:\n    create: (privateKey, claims) =>\n      Promise.resolve create(\"ES384\", privateKey, claims)\n\n    verify: (publicKey, jsonWebToken) =>\n      Promise.resolve verify(\"ES384\", publicKey, jsonWebToken)\n\n  es512:\n    create: (privateKey, claims) =>\n      Promise.resolve create(\"ES512\", privateKey, claims)\n\n    verify: (publicKey, jsonWebToken) =>\n      Promise.resolve verify(\"ES512\", publicKey, jsonWebToken)\n\n  hs384:\n    create: (secret, claims) =>\n      Promise.resolve create(\"HS384\", secret, claims)\n\n    verify: (secret, jsonWebToken) =>\n      Promise.resolve verify(\"HS384\", secret, jsonWebToken)\n\n  hs512:\n    create: (secret, claims) =>\n      Promise.resolve create(\"HS512\", secret, claims)\n\n    verify: (secret, jsonWebToken) =>\n      Promise.resolve verify(\"HS512\", secret, jsonWebToken)\n"
  ]
}